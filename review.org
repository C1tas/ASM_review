* IA-32体系
** 微机基本结构
- 中央处理器
  - 数量有限的寄存器存储单元
  - 高频时钟
    用于cpu内部操作和系统部件之间同步
    - 以固定的频率产生脉冲
    - 机器指令使用的最基本的时间单位称为机器周期或时钟周期
    - 时钟频率是时钟周期的持续时间的倒数.每秒振荡的次数计算
    - cpu主频cpu内部时钟频率
    - 机器指令执行至少需要一个时钟周期
  - 一个控制单元(CU)
    协调执行机器指令时各个步骤次序
  - 算数逻辑单元(ALU)
- 内存单元
存放指令和数据的地方
- 输入输出设备
  显示器,键盘,鼠标硬盘
- 三大总线连接
  - 数据总线
    在cpu和外部之间传输指令和数据
  - 控制总线
    使用数字信号,同步,控制接入到总线上所有设备
  - 地址总线
    传输指令和数据的地址

** 机器指令
- 取指令
  控制单元从指令队列中取出指令并递增指令指针
- 解码
  控制单元对指令进行解码确定该指令进行什么操作.将操作数传递给算术逻辑单元,并发送信号指明执行的操作
- 取操作数
  指令的操作数在内存,控制单元就产生读内存的操作,从内存中传入到内部寄存器.
- 执行
  算术逻辑单元执行指令,寄存器为操作数,运算结果输送到寄存器或内存,更新处理器状态标志
- 存储结果
  如果要存储到内存中,则执行写内存操作,将结果存到内存中去

** 多级流水线
指令执行每一步至少占一个时钟周期,流水线技术,实现多个部件间的并行处理,提高系统效率

模型参考
工厂加工流水线

** 内存读取
- 内存操作数的地址放在总线上
- 读取线设置为读功能,通知存储器要读一个值
- CPU等待,以便存储器响应,响应好后,将选中单元数据放到数据总线上.如果在这个时间没有准备好,则要求cpu插入更多等待周期
- 将读信号置1,通知cpu从数据总线上取数

缓存参考操作系统缓冲,是昂贵.

读取某数据,将该数据范围内的一块内存,读取并存放在缓存.操作此块内存,在缓存中进行

** 程序运行
- 查找图标对应程序文件
- 未找到,提示错误,如果找到,进一步获取程序文件的基本文件
- 操作系统分配内存,程序文件转入内存.
- 操作系统执行一条跳转指令,跳到这个程序第一条指令以开始这个程序的执行

** 多任务
- 同时运行多个任务
- 一次能运行一条指令的cpu,多任务是假象,通过分时间片
- 多任务运行在支持多任务切换的处理器
- 多任务切换,要保存当前任务状态,处理器寄存器,程序计数器(指令指针),标志寄存器
- 抢占式,高优先级打断低优先级

** 操作模式
- 保护模式
  基本模式

  - 指令集分成不同级别,程序也分成不同级别,如系统级,和应用程序级,应用程序级能执行的指令要少

  - 不同程序间独立,不能互相访问内存

  - 现代操作系统windows,linux都是把cpu设置在保护模式

  - 286引入,8086不具备



- 实地址模式
  - 8086工作模式
  - IA-32的向前兼容性,整个IA-32系列CPU都包含8086这个内核
  - cpu加电运行在实模式.开机自检,在实模式,系统载入的某一步设置为保护模式,后一直运行在保护模式
  - 无指令级别概念,内存不独立,程序可以互相访问内存
  - dos工作在实模式

- 虚拟8086模式
在保护模式,执行实地址模式

** 基本执行环境
- 地址空间
  - 32保护模式,一个任务可以寻址4G.32位地址总线的大小上限
  - 实地址模式,只用到20根地址线,最大地址1M
  - 虚拟8086,一个系统可以运行多个虚拟的8086模式程序,每个程序拥有独立1M
- 寄存器
cpu内存存储单元
 - 8个32位通用寄存器
   EAX,EBX,ECX,EDX,ESI,EDI,EBP,ESP
   AX,BX,CX,DX,SI,DI,BP,SP
   AH,AL,BH,BL,CH,CL,DH,DL
 - 通用寄存器
   - EAX,乘法除法自动被使用,扩展累加寄存器
   - ECX, 循环计数器
   - ESI,EDI,内存数据传送指令,扩展源变址寄存器.扩展目的变址寄存器
   - ESP,寻址堆栈,扩展堆栈指针寄存器
   - EBP,扩展帧指针寄存器
   - EBX,基址寄存器
   - EDX,数据寄存器
 - 6个16位段寄存器
   - 实模式,段寄存器放段的地址
   - 保护模式,放段描述的索引
   - 保护模式编程,较少关注段寄存器,而实模式必须关注,不正确的设置会导致内存的错误访问.
   - 段寄存器特定用途
     - CS指向代码
     - SS指向堆栈
     - DS指向数据
 - 指令寄存器EIP
   - 存放下一条要执行的指令地址
   - 没执行完一条指令cpu自动修改EIP
   - 不能用数据传送指令,算数指令去修改
 - 标志寄存器
   - 由控制CPU操作或反映CPU运算结果的独立二进制构成
   - 算术逻辑运算会影响这个寄存器
   - 有些指令可以测试和控制这些标志位
   - 各个标志
     - CF 进位借位置1
     - AF 辅助进位低四位进位或借位置1
     - PF 奇偶,偶数置1
     - ZF 为0置1
     - SF 符号位,补码时0正1负
     - OF 溢出置1
     - DF 串操作,D=1,自动减(左->右处理串);D=0,增
     - IF 中断标志,0中断屏蔽,1中断不屏蔽
     - TF 1,置单步执行方式

** 实地址模式
20位地址总线

可以访问1M(2^20 = 1048576)字节内存

地址范围 0~0FFFFFH

*** 问题
cpu寄存器16位怎么形成20位地址线上的信息

intel 采用分段方式,段地址和偏移量这两部分都是16位
将段地址左移4个二进制位与偏移量相加

段地址*16+偏移量


** 保护模式
4G空间

地址范围0~0FFFFFFFFH

内存使用分为平坦分段模式,多段模式

windows平台,一个32位整数就可以存放任何指令和变量地址

*** 平坦分段模式
- 所有段都映射到计算机的32位的地址空间中
- 一个程序包含至少两个段:代码段和数据段
- 每个段都由一个段描述符来定义
- 段描述符是一个64位的一个值,它包括这个段的基地址,段长度和其他属性
- 多个段描述符集中放在一片内存中,把这片内存成为段描述符表,再通过一个寄存器GDTR指向
- 段寄存器中存放段描述符选择子

**** 内存访问
平坦分段模式内存访问,指令包含一个32位的地址值

- cpu通过GDTR寄存器找到段描述符表
- 再通过段寄存器找到具体的段描述符
- 判断地址是否越界,越界则访问失败
- 未越界,将指令中的地址值加上段描述符中的段基址,形成线性地址
- 再通过分页机制,再去访问最终物理内存

*** 多段模式
- 每个任务或程序都有自己的段描述符表,称为局部描述表(LDT)
- 每个描述符都可以指向一个与其他进程使用的段不同的段,并且每个段都位于独立的地址空间

** 分页

IA-32支持分页

分页实现线性地址,到物理地址的映射

页一般大小为4k

通过一组转换表可以把线性地址转换成物理地址

连续的线性地址可能被映射成不连续的物理地址

分页更便于实现虚拟内存

* 汇编基础

** 进制
| h   | 十六进制           |
| q/o | 八进制             |
| b   | 二进制             |
| d   | 十进制(可以不后缀) |
| r   | 编码实数           |

十六进制第一位为字母开头必须加0

** 指令

| 标号   | 操作码    | 目的   | 源     | 注释     |
| label: | operation | object | source | ;comment |


*** 伪指令
Title, include, proc, endp, end

*** 指令
mov, add, call

*** 宏
exit

*** 实例
#+BEGIN_SRC
Title Simple Add
.386
.model flat, stdcall
.stack 4096
ExitProcess proto, dwExitCode:DWORD
DumpRegs proto
.code
Main proc
  mov eax, 1000h
  add eax, 4000h
  call DumpRegs
  invoke ExitProcess, 0
Main endp
End main
#+END_SRC

含include
#+BEGIN_SRC
Title Simple Add
Include irvine32.inc
.code
Main proc
  mov eax, 1000h
  add eax, 4000h
  call dumpregs
  exit
Main endp
End main
#+END_SRC

.386

允许386以及以前的cpu指令以及寄存器

.model flat, stdcall

使用平坦分段模式,stdcall表示函数使用时,是stdcall调用约定

.stack

定义栈 大小4K

** vc6
*** IDE

*** 创建配置project


** 数据类型
| BYTE   | 字节       |
| SBYTE  | 带符号字节 |
| WORD   | 字         |
| SWORD  | 带符号字   |
| DWORD  |            |
| SDWORD |            |

有无符号是方便程序员区分,汇编器不区分有无符号


*** 定义语句
[变量名] 数据类型伪指令 初始值



** 小端
12345678h
| 地址 | 值  |
|    0 | 78h |
|    1 | 56h |
|    2 | 34h |
|    3 | 12h |

** 未初始化的声明
.data?伪指令用于声明未初始化的数据段

在生成执行文件中,未初始化段不占文件存储空间
.data
smallArray DWORD 10 DUP(0)

.data?
bigArray DWORD 5000 DUP(?)

** 符号常量
Name EQU expression
Name EQU symbol
Name EQU <text>

类似c语言define

* 数据传送,寻址,算数运算

** MOV

mov 目的操作数 源操作数

*** MOVZX/MOVSX

将一个较小尺寸数复制给一个较大尺寸数

movzx 高位补0
movsx 把符号位扩展到整个高位

movzx reg32, reg8

** XCHG
交换两个操作数

XCHG 目的操作数 源操作数

** LAHF/SAHF

LAHF 将标志寄存器低八位复制到AH寄存器

SAHF 将AH寄存器复制到标志寄存器低八位

** INC/DEC
INC +1

DEC -1

** ADD/SUB

ADD 目的操作数 原操作数

SUB 目的操作数 原操作数

会修改CF,ZF,SF,OF,AF,PF

** NEG
求数的相反数

NEG 目的操作数

** OFFSET
返回数据标记的偏移地址

** ALIGN
将变量的位置按制定大小对齐

可以为1,2,4,8,16

.386只支持1,2,4

默认为1

如设为16 后边的变量地址为16的整数倍
#+BEGIN_SRC

.data
align 1
vb1 db 1
vd1 dd 10
align 4
vb2 db ?
vd2 dd ?
.code
alignTest proc
  mov esi, offset vb1 ;100
  mov esi, offset vd1 ;101
  mov esi, offset vb2 ;108
  mov esi, offset vd2 ;109
alignTest endp
end alignTest
#+END_SRC

** PTR 重载操作数声明的默认大小
类似强制类型转换

#+BEGIN_SRC
.data
myDouble DWORD 12345678h

.code
mov ax, word ptr myDouble

#+END_SRC

** TYPE
返回按字节计算的变量的单个元素的大小

** LENGTHOF
返回操作数元素个数
如果包含逗号,则包含下一行个数

** SIZEOF
返回操作数所占字节数

即LENGTHOF 和TYPE的乘积


** LABEL
为其后定义的变量提供一个别名和一个不同尺寸的属性

- 不会分配存储空间
- 不再需要PTR

#+BEGIN_SRC
.data
dwList LABLE DWORD
wordList LABLE WORD
intList BYTE 00h,10h,00h,20h
.code

mov eax, dwList ;20001000h
mov cx, wordList ;1000h
mov dl, intList ;00h
#+END_SRC


** 间接寻址
利用寄存器的值作为地址,访问操作数的方式称为间接寻址
mov ax,[si]

** JMP

JMP 无条件跳转

** LOOP
LOOP 循环

ecx 减1不等0,执行目的地址的指令

目的地址和当前地址只能相距-128~127之间

* 过程

** push
32位操作数,ESP减4,存到栈中内容为双字

16位操作数,ESP减2,存到栈中内容为字

保护模式的立即数总是32位的

实模式下未使用.386或更高的处理器伪指令,则立即数是16位的

** pop

32位操作数,拷贝栈中内容双字到操作数ESP减4,

16位操作数,拷贝栈中内容字到操作数  ESP减2,

*** pushfd/popfd

pushhfd 把32位标志寄存器压入栈

popfd   是从栈弹出32位到标志寄存器

无操作数

实模式16位对应pushf,popf

*** pushad/popad
pushad

把8个通用寄存器入栈

入栈顺序 eax,ecx,edx,ebx,esp,ebp,esi,edi

popad

反序弹出

pusha popa 对应16位

*** call
call 过程名

将eip 压栈,将过程名所在的地址赋值给eip

在过程需要返回的地方,让其执行RET指令

RET从栈中取出32位赋值给EIP

*** uses

定义过程时,可以在proc后跟uses操作符,再跟要要保护的寄存器列表


*** proc声明

#+BEGIN_SRC
name proc

name endp

#+END_SRC

* 条件处理
*** AND
源操作数 目的操作数按位与,存到目的操作数


*** XOR
按位异或

*** NOT
按位取反

*** TEST
与AND类似,不存到操作数中

*** CLC
清除CF标志位

*** STC
CF标志位置1

*** LOOPZ/LOOPE
都是测试ecx,和zf标志位,ecx不为0,zf为0也要退出,只有都不为0才继续循环

*** LOOPNZ/LOOPNE

若(CX)!=0且ZF=0,跳转

如果遇到CX=0或者ZF=1，则终止循环。

* 整数算术

*** SHL/SAL

对目的操作数左移,最低位补0,移出的最高位送入CF标志位原来的CF丢失

SHL 目的操作数. 移位位数

左移是一种快速乘法 乘2^n

*** SHR
逻辑右移,左边空出添0,右边最低位被移出,复制到CF


无符号快速除法 2^n

*** SAR
算数右移最高位不变

有符号快速除法

*** ROL/RCL
循环左移

*** ROR/RCR
循环右移


*** 乘法除法

无符号

- MUL
  - 8位与AL相乘,结果放在AX
  - 16位与AX相乘,放在DX和AX中,DX放高16位,AX放低16位
  - 32位与EAX相乘,结果放在EDX和EAX中,EDX放高32位,EAX低32位
  - 结果高半部分为非0,CF和OF置位,否则清0


- DIV
  - 8位 AX被除数,操作数除数 AL商,AH余数
  - 16  DX:AX               AX   DX
  - 32  EDX:EAX             EAX  EDX



有符号
- IMUL
  - 单操作数模式
    和MUL类似,均看作有符号数,高半部分不是低半部分的符号扩展,OF,CF置位
  - 双操作数
      两个操作数相乘,结果保存至第一个数,存不下则,OF,CF置位
  - 三操作数
      二三相乘,保存到第一个操作数,OF,CF置位

- IDIV
  - CBW AL符号扩展到AX

  - CWD AX符号扩展到DX:AX

  - CDQ EAX符号扩展到EDX:EAX

*** ADC
两个操作数与进位位一起相加,结果存放目的操作数

*** SBB

将目的操作数减去源操作数,再减进位位,保存到目的操作数

* 高级过程

** C约定方式
按照函数中参数从右到左依次入栈

子过程不处理堆栈调整,调用者自己调整

** stdcall调用约定
参数按函数表从右到左依次入栈

调用子过程采用ret imm方式调整堆栈

** LEA
返回间接操作数的偏移地址

[ebp + 12]

** ENTER
#+BEGIN_SRC
enter 8,0 等价

push ebp
mov ebp, esp
sub esp, 8
#+END_SRC

** LEAVE
与enter 配合
enter是子过程第一句,leave是ret前最后一句

等价
#+BEGIN_SRC
mov esp, ebp
pop ebp
#+END_SRC


** local
定义一个或多个局部变量

必须跟在proc 后

** invoke
是call 的增强版


invoke 过程名, [参数列表]

invoke DumpMem, offset array, lengthof array

等价
#+BEGIN_SRC
push lengthof array
push offset array
call DumpMem
#+END_SRC


** proto
声明过程原型


invoke调用的函数必须proto 声明

#+BEGIN_SRC
MySub proto
.....
.code
invode MySub
....


#+END_SRC
